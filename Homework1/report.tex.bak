\documentclass[a4paper, 11pt]{article}
% ----- Loading the Package MCMthesis -----
% -----           v 5.01-L            -----
% `tcn' is short for `Team Control Number'.
% You should fill your tcn after the equal sign following tcn.
% The option `sheet' contorls weather the summary sheet
% will appear.
% The option `abstract' controls weather the abstract
% will appear in the title-page.
\usepackage{float}
\usepackage{amsmath}
\usepackage{diagbox}
\usepackage{color}
% ----- Question Mark -----
% ----- Fonts settings -----
% You may need to install the font files, if it's needed.
% Disable it, if you don't want this font.
\usepackage{palatino}
\usepackage{geometry}% 能设置页边距
\usepackage{setspace}% 能设置行距
\usepackage{graphicx} %插入图形宏包
\usepackage{float} %与插入图形有关 禁止图表的浮动[H]
% ----- Set the skip betweent the paragraphics -----
\setlength\parskip{.5\baselineskip}
\setcounter{tocdepth}{4}
% ----- The name of Abstract ------
\providecommand{\abstractname}{\relax} % <-- Do not modify here.
\renewcommand{\abstractname}{\Large Abstract} % <-- Modify here, if needed.
% -----------------------------------
% ===== The Title of Your Paper =====
% -----------------------------------
\newtheorem{law}{Law} %law 表明定理的名字，在输出中不显示，Law 表明定理的真实名字，在输出中显示 名称的替代？
\newtheorem{jury}[law]{Jury} %表明以jury 为名称的定理与law 定理按同样顺序编号
\newtheorem{mur}{Murphy}[section] %[section] 使加入的定理的编号与当前节链接
\title{Solutions for HW2}
% ---------------------------------------
% ===== The Author(s) of Your Paper =====
% ---------------------------------------
\author{Yunhai Han}
% ----------------
% ===== Time =====
% ----------------
%首先 \begin{item} 是输出标号段落内容   \cite{} 能标号
\begin{document}
% Abstract should be put before `\maketitle'
\maketitle
\newgeometry{top=3cm,bottom=3cm,left=2cm,right=2cm} %全文页边距设置 4个方向 这个命令只能针对全文，与作用区域无关，即使在一个单独分组里？
\pagestyle{empty}
% Generate the Table of Contents, if it's needed.
% \tableofcontents
% \newpage
% The body of your paper

%====================== 问题介绍====================================
\section{E2.1 Convexity}
\subsection{i}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=4cm,width=8cm]{convexset.png}
\caption{Convex set(from lecture notes by Bullo and Smith)} \label{fig:convexset} %caption 即标题的意思
\end{figure}
A set $S$ is convex if for any two points $p$ and $q$ in $S$, the entire segment $\bar{pq}$ is also contained in $S$. Examples of convex set and non-convex set are drawn in Figure \ref{fig:convexset}.

The advantage of convex sets over non-convex ones for motion planning is that if the start point and the goal point belong to the same convex set, then the segment connecting the two points is an obstacle-free path, which makes the motion planning problem easier to deal with.
\subsection{ii}

\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=6cm,width=6cm]{bug0.png}
\caption{The diagram of such an environment} \label{fig:bug0} %caption 即标题的意思
\end{figure}
From the above figure, the red line shows the path the robot would move along when we implement switching bug 0 algorithm on it. It is clear that a path from start to goal exists, but the robot could never finds it. In this case, the switching algorithm could never reach the goal location.
\subsection{iii}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=4cm,width=10cm]{bug03.png}
\caption{The distance between the robot and the goal location} \label{fig:bug03} %caption 即标题的意思
\end{figure}
From the above figure, I could tell the the symmetric property of this environment is the main reason for why the switching bug 0 algorithm would fail. In such an environment, the robot would not stop cycling until the battery goes dead.
\section{E2.5 Computing time complexity}
From the hint, it assumes that addition, multiplication and division of two numbers all have unit cost.
\subsection{i}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=0$
\item[2.] for $i$ from 1 to $n$:
\item[3.] \mbox{}\phantom{AAA}$a=a+1$
\end{itemize}
For the above programs, it would take $1+n$ operations required for execution. Hence, the time complexity is $O(n)$.
\subsection{ii}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=0$
\item[2.] for $i$ from 1 to 10:
\item[3.] \mbox{}\phantom{AAA}$a=a+1$
\end{itemize}
For the above programs, it would take $1+10$ operations required for execution. Hence, the time complexity is $O(1)$, which means the running time would not increase with the scale.
\subsection{iii}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=0$
\item[2.] for $i$ from 1 to $n$:
\item[3.] \mbox{}\phantom{AAA}$a=a+1$
\item[2.] for $j$ from 1 to $n$:
\item[3.] \mbox{}\phantom{AAA}$a=a+1$
\end{itemize}
For the above programs, it would take $1+2n$ operations required for execution. Hence, the time complexity is also $O(n)$.
\subsection{iv}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=0$
\item[2.] for $i$ from 1 to $n$:
\item[3.] \mbox{}\phantom{AAA}for $j$ from 1 to $n$:
\item[4.] \mbox{}\phantom{AAAAAA}$a=a+1$
\end{itemize}
For the above programs, it would take $1+n*n$ operations required for execution. Hence, the time complexity is also $O(n^2)$.
\subsection{v}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=0$
\item[2.] for $i$ from 1 to $n$:
\item[3.] \mbox{}\phantom{AAA}for $j$ from i to $n$:
\item[4.] \mbox{}\phantom{AAAAAA}$a=a+1$
\end{itemize}
For the above programs, it would take $1+\sum^{n}_{i=1}(n+1-i)=1+\frac{n^2+n}{2}$ operations required for execution. Hence, the time complexity is also $O(n^2)$.
\subsection{vi}
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item[1.] $a=n$
\item[2.] while $a \geq 1$:
\item[3.] \mbox{}\phantom{AAA}$a=a/2$
\end{itemize}
For the above programs, it would take $1+\lceil 2\log n \rceil+1$ operations required for execution. I assume the base of $\log n$ is 2 and n is larger than 1. Here, I give a brief explanation of the expression:

At first, we initialize $a$ and it requires one step and obviously it would scale with input $n$. Then, we divide the variable by 2 and check whether it is less than 1 or not. This process could take $\lceil 2\log n \rceil$ steps and the multiplier 2 means both the division and check would take 1 step for each time. After $\log n$ divisions, we could always obtain a value which is between 1 and 2. The special case is when $n$ is a multiple of 2. In this case, the value after $\log n$ divisions is 1 and from the title, we know there is no need for more divisions. However, when $n$ is not a multiple of 2, the value would be larger than 1 but smaller then 2 and $\log n$ could be a float. We still need to do one more check and division. Hence, I always round up $\log n$. Finally, we still have to check whether the value is not larger than 1. And this time, we know that it would be less than 1, so it just jumps out of the while-loop.

The time complexity is $O(\log n)$.
\section{Programming:Lines and segments}
\subsection{computeLineThroughTwoPoints}
It is easy to derive the analytic formulas as I show below:
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
\left\{ \begin{array}{l} %这里的ll换成ccc的话，输出不对齐，注意表达式的括号是用{表示，而且输出显示{的话，必须要\{
x_1a+y_1b+c=0 \\ %textrm里面是标注的文字信息，若是一句话里有表达式类的，还得用$$括起来
x_2a+y_2b+c=0 \\
a^2+b^2=1
\end{array} \right. % \right. 隐藏右边的括号 点(.)不可少  \right\} 可在右侧生成括号
\end{equation}
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
\left\{ \begin{array}{l} %这里的ll换成ccc的话，输出不对齐，注意表达式的括号是用{表示，而且输出显示{的话，必须要\{
(x_1-x_2)a+(y_1-y_2)b=0 \\ %textrm里面是标注的文字信息，若是一句话里有表达式类的，还得用$$括起来
a^2+b^2=1
\end{array} \right. % \right. 隐藏右边的括号 点(.)不可少  \right\} 可在右侧生成括号
\end{equation}
From the above equations, we can easy obtain the answers.
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
\left\{ \begin{array}{l} %这里的ll换成ccc的话，输出不对齐，注意表达式的括号是用{表示，而且输出显示{的话，必须要\{
a=\frac{1}{\sqrt{1+(\frac{x1-x2}{y1-y2})^2}} \\ %textrm里面是标注的文字信息，若是一句话里有表达式类的，还得用$$括起来
b=-\frac{x1-x2}{y1-y2}*a \\
c=-x1*a-y1*b
\end{array} \right. % \right. 隐藏右边的括号 点(.)不可少  \right\} 可在右侧生成括号
 %这里\left的括号是{  然而特殊字符 \{
\left\{ \begin{array}{l} %这里的ll换成ccc的话，输出不对齐，注意表达式的括号是用{表示，而且输出显示{的话，必须要\{
a=-\frac{1}{\sqrt{1+(\frac{x1-x2}{y1-y2})^2}} \\ %textrm里面是标注的文字信息，若是一句话里有表达式类的，还得用$$括起来
b=-\frac{x1-x2}{y1-y2}*a \\
c=-x1*a-y1*b
\end{array} \right. % \right. 隐藏右边的括号 点(.)不可少  \right\} 可在右侧生成括号
\end{equation}
Althought there are two solutions, they represent the same line equation(For the second solution, I could multiple -1 on both sides of the equation).
The correctness of the answers could be esaily done by tests using Python.

Pay attention, this method could not work when the two points are on a horizonal line:$y_1-y_2=0$. In this case, $a$ does not exist. However, since there is only one special case, I could test whether the input two points fall into this case, and if so, I would quickly obtain the formula; if not, do the above calculations.
\subsection{computeDistancePointToLine}
From the above part, we could obtain the analytic formula of a line by point $p_1$ and point $p_2$. As we learnt from high school, the distance($D$) from a point($p=(x1,y1)$) to a line($ax+by+c=0$) could be obtained through a simple formula:
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
D=\frac{|ax_1+by_1+c|}{\sqrt{a^2+b^2}} %textrm里面是标注的文字信息，若是一句话里有表达式类的，还得用$$括起来
\end{equation}
From this definition, I could easily calculate the distance.

There is no special case here if I could obtain the line formula from the previous part.
\subsection{computeDistancePointToSegment}
For the distance from $q$ to the segment with extreme points $(p_1,p_2)$, I could use the function shown above. Also, by comparing the distances between point $q$ and points $p1,p2$, I could know which one is closer to $q$. In order to conclude whether the closest point to $q$ is strictly inside the segment or not, I need to find the intersection point of the given line segment and the line which passes through $q$ and is orthorgoal to the line segment. If the intersection point is strictly inside the segment, $w$ should be 0. Otherwise, $w$ should be given with the value corrsponding to one of the extreme points.
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
 \left\{ \begin{array}{l}
a_1x+b_1y+c_1=0\text{(known using two extreme points)} \\
a_2x_q+b_2y_q+c_2=0 \\
a_1a_2+b_1b_2=0 \\
a_2^2+b_2^2=1
\end{array} \right.
\end{equation}
From the above equations, I could obtain the formula for the line which passes through $q$ and is orthorgoal to the line segment.
\begin{equation}
 %这里\left的括号是{  然而特殊字符 \{
 \left\{ \begin{array}{l}
a_1x+b_1y+c_1=0 \\
a_2x+b_2y+c_2=0
\end{array} \right.
\end{equation}
After I obtain the intersection point, It is very easy to see whether it is strictly inside the line segment.

Also, there are two special cases.The first one is when the two points are on a vertical line and the second line is horizontal. The second one is when the two points are on a horizontal line and the second line is vertical. In these two cases, I could not use the same way to calcalate the slopes of two lines. However, since they are really special and it's esay to tell whether the input points fall in one of them, I could handle them without any difficulty.
\subsection{Verification}
For the first part, I input four groups of points which correspond to four different cases respectively. The four cases are:
\begin{itemize} %\itemize 是制作一个格式，一条一条的格式，编译见
\item The two points are on a general line
\item The two points are on a horizontal line
\item The two points are on a vertical line
\item The two points are the same
\end{itemize}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=8cm,width=8cm]{code1.png}
\caption{Verification codes} \label{fig:route4} %caption 即标题的意思
\end{figure}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=4cm,width=15cm]{result1.png}
\caption{Results} \label{fig:route4} %caption 即标题的意思
\end{figure}
From the above two figures, you could see the results are correct.

For the second part, I test the function in two different cases:the point in on the line or off the line.
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=10cm,width=10cm]{code2.png}
\caption{Verification codes} \label{fig:route44} %caption 即标题的意思
\end{figure}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=4cm,width=16cm]{result2.png}
\caption{Results} \label{fig:route44} %caption 即标题的意思
\end{figure}
From the above two figures, you could see the results are correct.

For the third part, I test the function in different three cases when w should be assigned different values.
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=8cm,width=8cm]{code3.png}
\caption{Verification codes} \label{fig:route444} %caption 即标题的意思
\end{figure}
\begin{figure}[H] %[H]表明图片输出在指定想要的位置（即代码处的位置），不然图片输出此页最上方，
\centering
\includegraphics[angle=0,height=4cm,width=16cm]{result3.png}
\caption{Results} \label{fig:route444} %caption 即标题的意思
\end{figure}
From the above two figures, you could see the results are correct.
\end{document}
% ----- End of Document Body -----
